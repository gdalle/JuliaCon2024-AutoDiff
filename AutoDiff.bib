@article{baydinAutomaticDifferentiationMachine2018,
  title = {Automatic {{Differentiation}} in {{Machine Learning}}: A {{Survey}}},
  shorttitle = {Automatic {{Differentiation}} in {{Machine Learning}}},
  author = {Baydin, Atilim Gunes and Pearlmutter, Barak A. and Radul, Alexey Andreyevich and Siskind, Jeffrey Mark},
  year = {2018},
  journal = {Journal of Machine Learning Research},
  volume = {18},
  number = {153},
  pages = {1--43},
  issn = {1533-7928},
  url = {http://jmlr.org/papers/v18/17-468.html},
  urldate = {2023-03-12},
  abstract = {Derivatives, mostly in the form of gradients and Hessians, are ubiquitous in machine learning. Automatic differentiation (AD), also called algorithmic differentiation or simply {\^a}autodiff{\^a}, is a family of techniques similar to but more general than backpropagation for efficiently and accurately evaluating derivatives of numeric functions expressed as computer programs. AD is a small but established field with applications in areas including computational fluid dynamics, atmospheric sciences, and engineering design optimization. Until very recently, the fields of machine learning and AD have largely been unaware of each other and, in some cases, have independently discovered each other's results. Despite its relevance, general-purpose AD has been missing from the machine learning toolbox, a situation slowly changing with its ongoing adoption under the names {\^a}dynamic computational graphs{\^a} and {\^a}differentiable programming{\^a}. We survey the intersection of AD and machine learning, cover applications where AD has direct relevance, and address the main implementation techniques. By precisely defining the main differentiation techniques and their interrelationships, we aim to bring clarity to the usage of the terms {\^a}autodiff{\^a}, {\^a}automatic differentiation{\^a}, and {\^a}symbolic differentiation{\^a} as these are encountered more and more in machine learning settings.},
  keywords = {autodiff,done,inferopt,thesis,tracer},
  file = {/home/gdalle/snap/zotero-snap/common/Zotero/storage/MP87JETA/Baydin et al_2018_Automatic Differentiation in Machine Learning.pdf}
}

@inproceedings{blondelEfficientModularImplicit2022,
  title = {Efficient and {{Modular Implicit Differentiation}}},
  booktitle = {Advances in {{Neural Information Processing Systems}}},
  author = {Blondel, Mathieu and Berthet, Quentin and Cuturi, Marco and Frostig, Roy and Hoyer, Stephan and {Llinares-L{\'o}pez}, Felipe and Pedregosa, Fabian and Vert, Jean-Philippe},
  year = {2022},
  month = oct,
  url = {https://openreview.net/forum?id=Q-HOv_zn6G},
  urldate = {2023-03-12},
  abstract = {Automatic differentiation (autodiff) has revolutionized machine learning. It allows to express complex computations by composing elementary ones in creative ways and removes the burden of computing their derivatives by hand. More recently, differentiation of optimization problem solutions has attracted widespread attention with applications such as optimization layers, and in bi-level problems such as hyper-parameter optimization and meta-learning. However, so far, implicit differentiation remained difficult to use for practitioners, as it often required case-by-case tedious mathematical derivations and implementations. In this paper, we propose automatic implicit differentiation, an efficient and modular approach for implicit differentiation of optimization problems. In our approach, the user defines directly in Python a function \$F\$ capturing the optimality conditions of the problem to be differentiated. Once this is done, we leverage autodiff of \$F\$ and the implicit function theorem to automatically differentiate the optimization problem. Our approach thus combines the benefits of implicit differentiation and autodiff. It is efficient as it can be added on top of any state-of-the-art solver and modular as the optimality condition specification is decoupled from the implicit differentiation mechanism. We show that seemingly simple principles allow to recover many existing implicit differentiation methods and create new ones easily. We demonstrate the ease of formulating and solving bi-level optimization problems using our framework. We also showcase an application to the sensitivity analysis of molecular dynamics.},
  langid = {english},
  keywords = {autodiff,done,inferopt,thesis,tracer},
  file = {/home/gdalle/snap/zotero-snap/common/Zotero/storage/5MNWEQPU/Blondel et al. - 2022 - Efficient and Modular Implicit Differentiation.pdf}
}

@misc{blondelElementsDifferentiableProgramming2024,
  title = {The {{Elements}} of {{Differentiable Programming}}},
  author = {Blondel, Mathieu and Roulet, Vincent},
  year = {2024},
  month = mar,
  number = {arXiv:2403.14606},
  eprint = {2403.14606},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2403.14606},
  url = {http://arxiv.org/abs/2403.14606},
  urldate = {2024-03-22},
  abstract = {Artificial intelligence has recently experienced remarkable advances, fueled by large models, vast datasets, accelerated hardware, and, last but not least, the transformative power of differentiable programming. This new programming paradigm enables end-to-end differentiation of complex computer programs (including those with control flows and data structures), making gradient-based optimization of program parameters possible. As an emerging paradigm, differentiable programming builds upon several areas of computer science and applied mathematics, including automatic differentiation, graphical models, optimization and statistics. This book presents a comprehensive review of the fundamental concepts useful for differentiable programming. We adopt two main perspectives, that of optimization and that of probability, with clear analogies between the two. Differentiable programming is not merely the differentiation of programs, but also the thoughtful design of programs intended for differentiation. By making programs differentiable, we inherently introduce probability distributions over their execution, providing a means to quantify the uncertainty associated with program outputs.},
  archiveprefix = {arXiv},
  keywords = {autodiff,diffexp,done,tracer},
  file = {/home/gdalle/snap/zotero-snap/common/Zotero/storage/3KCV6KRG/Blondel_Roulet_2024_The Elements of Differentiable Programming.pdf;/home/gdalle/snap/zotero-snap/common/Zotero/storage/B7URG3VS/2403.html}
}

@article{gebremedhinWhatColorYour2005,
  title = {What {{Color Is Your Jacobian}}? {{Graph Coloring}} for {{Computing Derivatives}}},
  shorttitle = {What {{Color Is Your Jacobian}}?},
  author = {Gebremedhin, Assefaw Hadish and Manne, Fredrik and Pothen, Alex},
  year = {2005},
  month = jan,
  journal = {SIAM Review},
  volume = {47},
  number = {4},
  pages = {629--705},
  publisher = {{Society for Industrial and Applied Mathematics}},
  issn = {0036-1445},
  doi = {10/cmwds4},
  url = {https://epubs.siam.org/doi/abs/10.1137/S0036144504444711},
  urldate = {2022-02-03},
  abstract = {Graph coloring has been employed since the 1980s to efficiently compute sparse Jacobian and Hessian matrices using either finite differences or automatic differentiation. Several coloring problems occur in this context, depending on whether the matrix is a Jacobian or a Hessian, and on the specifics of the computational techniques employed. We consider eight variant vertex coloring problems here. This article begins with a gentle introduction to the problem of computing a sparse Jacobian, followed by an overview of the historical development of the research area. Then we present a unifying framework for the graph models of the variant matrix estimation problems. The framework is based upon the viewpoint that a partition of a matrix into structurally orthogonal groups of columns corresponds to distance-2 coloring an appropriate graph representation. The unified framework helps integrate earlier work and leads to fresh insights; enables the design of more efficient algorithms for many problems; leads to new algorithms for others; and eases the task of building graph models for new problems. We report computational results on two of the coloring problems to support our claims. Most of the methods for these problems treat a column or a row of a matrix as an atomic entity, and partition the columns or rows (or both). A brief review of methods that do not fit these criteria is provided. We also discuss results in discrete mathematics and theoretical computer science that intersect with the topics considered here.},
  keywords = {autodiff,semidone,tracer},
  file = {/home/gdalle/snap/zotero-snap/common/Zotero/storage/AGLB9RM8/Gebremedhin et al_2005_What Color Is Your Jacobian.pdf}
}

@book{griewankEvaluatingDerivativesPrinciples2008,
  title = {Evaluating Derivatives: Principles and Techniques of Algorithmic Differentiation},
  shorttitle = {Evaluating Derivatives},
  author = {Griewank, Andreas and Walther, Andrea},
  year = {2008},
  edition = {2nd ed},
  publisher = {{Society for Industrial and Applied Mathematics}},
  address = {Philadelphia, PA},
  abstract = {This title is a comprehensive treatment of algorithmic, or automatic, differentiation. The second edition covers recent developments in applications and theory, including an elegant NP completeness argument and an introduction to scarcity},
  isbn = {978-0-89871-659-7},
  lccn = {QA304 .G76 2008},
  keywords = {autodiff,inferopt,semidone,thesis,tracer},
  annotation = {OCLC: ocn227574816},
  file = {/home/gdalle/snap/zotero-snap/common/Zotero/storage/ZBNZIFGC/Griewank_Walther_2008_Evaluating Derivatives.pdf}
}

@article{margossianReviewAutomaticDifferentiation2019,
  title = {A Review of Automatic Differentiation and Its Efficient Implementation},
  author = {Margossian, Charles C.},
  year = {2019},
  journal = {WIREs Data Mining and Knowledge Discovery},
  volume = {9},
  number = {4},
  pages = {e1305},
  issn = {1942-4795},
  doi = {10.1002/widm.1305},
  url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/widm.1305},
  urldate = {2023-03-12},
  abstract = {Derivatives play a critical role in computational statistics, examples being Bayesian inference using Hamiltonian Monte Carlo sampling and the training of neural networks. Automatic differentiation (AD) is a powerful tool to automate the calculation of derivatives and is preferable to more traditional methods, especially when differentiating complex algorithms and mathematical functions. The implementation of AD, however, requires some care to insure efficiency. Modern differentiation packages deploy a broad range of computational techniques to improve applicability, run time, and memory management. Among these techniques are operation overloading, region-based memory, and expression templates. There also exist several mathematical techniques which can yield high performance gains when applied to complex algorithms. For example, semi-analytical derivatives can reduce by orders of magnitude the runtime required to numerically solve and differentiate an algebraic equation. Open and practical problems include the extension of current packages to provide more specialized routines, and finding optimal methods to perform higher-order differentiation. This article is categorized under: Algorithmic Development {$>$} Scalable Statistical Methods},
  langid = {english},
  keywords = {autodiff,done,inferopt,thesis,tracer},
  file = {/home/gdalle/snap/zotero-snap/common/Zotero/storage/G6C6EX8U/Margossian_2019_A review of automatic differentiation and its efficient implementation.pdf;/home/gdalle/snap/zotero-snap/common/Zotero/storage/2JWFI24S/widm.html}
}
